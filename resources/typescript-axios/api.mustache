{{! TEMPLATE EDIT: don't ref to custom deceleration file }}
{{! /// <reference path="./custom.d.ts" /> }}
// tslint:disable
{{>licenseInfo}}

import * as url from "url";
{{! TEMPLATE EDIT: use fetch as API caller  }}
{{! import * as portableFetch from "portable-fetch"; }}
import fetch from 'node-fetch';
import { Guid } from 'guid-typescript';

import { Configuration } from "./configuration";

{{! TEMPLATE EDIT: import session object type  }}
import { HarmonyError, HarmonyErrorScope, SDKConnectionState, InfinityPortalAuth, HarmonyRequestOptions, HarmonyResponse, HarmonyEndpointOptions, HarmonyEndpointSDKInfo } from "../../../interfaces/infra";
import { SessionManager } from "../../../core/session.manager";
import { JobManager } from "../../../core/jobs.management";
import { logger, errorLogger, networkLogger } from "../../../core/debug.logger";
import { RUNNING_ENV } from "../../../core/sdk.platform";
import { parseFetchError } from "../../../core/common";
import { HarmonyRequestSession } from "../../../interfaces/core";

const swagger = require('../swagger.json');
const packageJson = require('../../../../package.json');
const buildManifest = require('../build.json');

{{! TEMPLATE EDIT: use built-in fetch as API caller  }}
const portableFetch = fetch as any;
{{! TEMPLATE EDIT }}


const BASE_PATH =  '';

{{! TEMPLATE EDIT }}

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
 interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
 interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
 class BaseAPI {
    {{! TEMPLATE EDIT: TS fix }}
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    {{! TEMPLATE EDIT: TS fix }}
    name!: "RequiredError";
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

{{#models}}
{{#model}}{{#isEnum}}{{>modelEnum}}{{/isEnum}}{{^isEnum}}{{>modelGeneric}}{{/isEnum}}{{/model}}
{{/models}}
{{#apiInfo}}{{#apis}}{{#operations}}
/**
 * {{classname}} - fetch parameter creator{{#description}}
 * {{&description}}{{/description}}
 */
const {{classname}}FetchParamCreator = function (harmonyRequestSession: HarmonyRequestSession, configuration?: Configuration) {
    return {
    {{#operation}}
        /**
         * {{&notes}}
         {{#summary}}
         * @summary {{&summary}}
         {{/summary}}
         {{#allParams}}
         * @param {{=<% %>=}}{<%&dataType%>}<%={{ }}=%> {{^required}}[{{/required}}{{paramName}}{{^required}}]{{/required}} {{description}}
         {{/allParams}}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}options: any = {}): FetchArgs {
    {{#allParams}}
    {{#required}}
            // verify required parameter '{{paramName}}' is not null or undefined
            if ({{paramName}} === null || {{paramName}} === undefined) {
                throw new RequiredError('{{paramName}}','Required parameter {{paramName}} was null or undefined when calling {{nickname}}.');
            }
    {{/required}}
    {{/allParams}}
            const localVarPath = `{{{path}}}`{{#pathParams}}
                .replace(`{${"{{baseName}}"}}`, encodeURIComponent(String({{paramName}}))){{/pathParams}};
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: '{{httpMethod}}' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            {{! TEMPLATE EDIT }}

            

    {{#hasFormParams}}
            const localVarFormParams = new url.URLSearchParams();
    {{/hasFormParams}}

    {{#authMethods}}
            // authentication {{name}} required
            {{#isApiKey}}
            {{#isKeyInHeader}}
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("{{keyParamName}}")
					: configuration.apiKey;
                localVarHeaderParameter["{{keyParamName}}"] = localVarApiKeyValue;
            }
            {{/isKeyInHeader}}
            {{#isKeyInQuery}}
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("{{keyParamName}}")
					: configuration.apiKey;
                localVarQueryParameter["{{keyParamName}}"] = localVarApiKeyValue;
            }
            {{/isKeyInQuery}}
            {{/isApiKey}}
            {{#isBasic}}
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }
            {{/isBasic}}
            {{#isOAuth}}
            // oauth required
            if (configuration && configuration.accessToken) {
				const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
					? configuration.accessToken("{{name}}", [{{#scopes}}"{{{scope}}}"{{^-last}}, {{/-last}}{{/scopes}}])
					: configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            {{/isOAuth}}

    {{/authMethods}}

            const harmonySession = harmonyRequestSession.sessionManager.getHarmonySession();
            if (!harmonySession) {
                errorLogger(`Unable to process operation "{{nickname}}", no session configured, login first`);
                throw {
                    errorScope: HarmonyErrorScope.SESSION,
                    message: 'No session configured, login first',
                    requestId: harmonyRequestSession.requestId,
                } as HarmonyError
            }


            localVarHeaderParameter["Authorization"] = `Bearer ${harmonySession.infinityToken}`;
            localVarHeaderParameter["x-mgmt-api-token"] = harmonySession?.harmonyToken || '';
            localVarHeaderParameter["x-mgmt-data-session-id"] = harmonySession.sessionId;
            localVarHeaderParameter["x-mgmt-data-request-id"] = harmonyRequestSession.requestId;
            localVarHeaderParameter["x-mgmt-data-request-source"] = 'harmony-endpoint-js-sdk';

            localVarQueryParameter['operationName'] = '{{nickname}}';
            localVarQueryParameter['requestId'] = harmonyRequestSession.requestId;

    {{#queryParams}}
            {{#isListContainer}}
            if ({{paramName}}) {
            {{#isCollectionFormatMulti}}
                localVarQueryParameter['{{baseName}}'] = {{paramName}};
            {{/isCollectionFormatMulti}}
            {{^isCollectionFormatMulti}}
                localVarQueryParameter['{{baseName}}'] = {{paramName}}.join(COLLECTION_FORMATS["{{collectionFormat}}"]);
            {{/isCollectionFormatMulti}}
            }
            {{/isListContainer}}
            {{^isListContainer}}
            if ({{paramName}} !== undefined) {
                {{#isDateTime}}
                localVarQueryParameter['{{baseName}}'] = ({{paramName}} as any).toISOString();
                {{/isDateTime}}
                {{^isDateTime}}
                {{#isDate}}
                localVarQueryParameter['{{baseName}}'] = ({{paramName}} as any instanceof Date) ?
                    ({{paramName}} as any).toISOString().substr(0,10) :
                    {{paramName}};
                {{/isDate}}
                {{^isDate}}
                localVarQueryParameter['{{baseName}}'] = {{paramName}};
                {{/isDate}}
                {{/isDateTime}}
            }
            {{/isListContainer}}

    {{/queryParams}}
    {{#headerParams}}
            {{#isListContainer}}
            if ({{paramName}}) {
                localVarHeaderParameter['{{baseName}}'] = {{paramName}}.join(COLLECTION_FORMATS["{{collectionFormat}}"]));
            }
            {{/isListContainer}}
            {{^isListContainer}}
            if ({{paramName}} !== undefined && {{paramName}} !== null) {
                localVarHeaderParameter['{{baseName}}'] = String({{paramName}});
            }
            {{/isListContainer}}

    {{/headerParams}}
    {{#formParams}}
            {{#isListContainer}}
            if ({{paramName}}) {
            {{#isCollectionFormatMulti}}
                {{paramName}}.forEach((element) => {
                    localVarFormParams.append('{{baseName}}', element as any);
                })
            {{/isCollectionFormatMulti}}
            {{^isCollectionFormatMulti}}
                    localVarFormParams.set('{{baseName}}', {{paramName}}.join(COLLECTION_FORMATS["{{collectionFormat}}"]));
            {{/isCollectionFormatMulti}}
            }
            {{/isListContainer}}
            {{^isListContainer}}
            if ({{paramName}} !== undefined) {
                localVarFormParams.set('{{baseName}}', {{paramName}} as any);
            }
            {{/isListContainer}}

    {{/formParams}}
    {{#hasFormParams}}
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

    {{/hasFormParams}}
    {{#bodyParam}}
            {{^consumes}}
            localVarHeaderParameter['Content-Type'] = 'application/json';
            {{/consumes}}
            {{#consumes.0}}
            localVarHeaderParameter['Content-Type'] = '{{{mediaType}}}';
            {{/consumes.0}}

    {{/bodyParam}}
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            {{! TEMPLATE EDIT: TS fix }}
            const anonimusObj = localVarUrlObj as any;
            delete anonimusObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
    {{#hasFormParams}}
            localVarRequestOptions.body = localVarFormParams.toString();
    {{/hasFormParams}}
    {{#bodyParam}}
            {{! TEMPLATE EDIT: Lint fix }}
            // eslint-disable-next-line
            const needsSerialization = (<any>"{{dataType}}" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify({{paramName}} || {}) : ({{paramName}} || "");
    {{/bodyParam}}

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    {{/operation}}
    }
};

/**
 * {{classname}} - functional programming interface{{#description}}
 * {{{description}}}{{/description}}
 */
const {{classname}}Fp = function(configuration?: Configuration) {
    return {
    {{#operation}}
        /**
         * {{&notes}}
         {{#summary}}
         * @summary {{&summary}}
         {{/summary}}
         {{#allParams}}
         * @param {{=<% %>=}}{<%&dataType%>}<%={{ }}=%> {{^required}}[{{/required}}{{paramName}}{{^required}}]{{/required}} {{description}}
         {{/allParams}}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ {{! TEMPLATE EDIT }}
        {{nickname}}(harmonyRequestSession: HarmonyRequestSession, {{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<HarmonyResponse<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}null{{/returnType}}>> {
            const localVarFetchArgs = {{classname}}FetchParamCreator(harmonyRequestSession, configuration).{{nickname}}({{#allParams}}{{paramName}}, {{/allParams}}options);
            return (fetch: FetchAPI = portableFetch, basePath: string = harmonyRequestSession.sessionManager.baseURL) => {
                const finalUrl = harmonyRequestSession.sessionManager.baseURL + localVarFetchArgs.url;
                logger(`Sending operation "{{nickname}}" url ${finalUrl}...`);
                networkLogger(`Sending "${finalUrl}" with options: "${JSON.stringify(localVarFetchArgs.options)}"`);
                if (harmonyRequestSession.sessionManager.httpAgent) {
                    // Inject agent
                    localVarFetchArgs.options.agent = harmonyRequestSession.sessionManager.httpAgent;
                }
                return fetch(finalUrl, localVarFetchArgs.options).then(async (response) => {
                    logger(`Receiving operation "{{nickname}}" url ${finalUrl} with status code "${response.status}"`);
                    if (response.status >= 200 && response.status < 300) {
                        const dataRes = new HarmonyResponse<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}null{{/returnType}}>()
                        dataRes.payload = {{#returnType}}await response.json(){{/returnType}}{{^returnType}}null{{/returnType}};
                        dataRes.httpResponse = response;
                        dataRes.requestId = harmonyRequestSession.requestId;
                        dataRes.isJob = localVarFetchArgs.options?.headers?.['x-mgmt-run-as-job'] === 'on'
                        if (dataRes.isJob) {
                            dataRes.jobId = (dataRes.payload as any || await response.json()).jobId;
                        }
                        networkLogger(`Receiving "${finalUrl}" with options: "${JSON.stringify({
                            body: dataRes.payload,
                            status: response.status,
                            headers: (response?.headers as any)?.raw?.()
                        })}"`);
                        return dataRes;
                    } else {
                        throw response;
                    }
                });
            };
        },
    {{/operation}}
    }
};

/**
 * {{classname}} - factory interface{{#description}}
 * {{&description}}{{/description}}
 */
const {{classname}}Factory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
    {{#operation}}
        /**
         * {{&notes}}
         {{#summary}}
         * @summary {{&summary}}
         {{/summary}}
         {{#allParams}}
         * @param {{=<% %>=}}{<%&dataType%>}<%={{ }}=%> {{^required}}[{{/required}}{{paramName}}{{^required}}]{{/required}} {{description}}
         {{/allParams}}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ {{! TEMPLATE EDIT }}
        {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}options?: any) {
            const harmonyRequestSession = { requestId : Guid.create().toString() } as any;
            return {{classname}}Fp(configuration).{{nickname}}(harmonyRequestSession, {{#allParams}}{{paramName}}, {{/allParams}}options)(fetch, basePath);
        },
    {{/operation}}
    };
};

{{#withInterfaces}}
/**
 * {{classname}} - interface{{#description}}
 * {{&description}}{{/description}}
 * @interface {{classname}}
 */
interface {{classname}}Interface {
{{#operation}}
    /**
     * {{&notes}}
     {{#summary}}
     * @summary {{&summary}}
     {{/summary}}
     {{#allParams}}
     * @param {{=<% %>=}}{<%&dataType%>}<%={{ }}=%> {{^required}}[{{/required}}{{paramName}}{{^required}}]{{/required}} {{description}}
     {{/allParams}}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof {{classname}}Interface
     */ {{! TEMPLATE EDIT }}
    {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}options?: any): Promise<HarmonyResponse<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}null{{/returnType}}>>;

{{/operation}}
}

{{/withInterfaces}}
/**
 * {{classname}} - object-oriented interface{{#description}}
 * {{{description}}}{{/description}}
 * @export
 * @class {{classname}}
 * @extends {BaseAPI}
 */
{{#withInterfaces}}
 class {{classname}} extends BaseAPI implements {{classname}}Interface {
    constructor(private sessionManager: SessionManager, private jobManager?: JobManager) {
        super()
    }
{{/withInterfaces}}
{{^withInterfaces}}
 class {{classname}} extends BaseAPI {
{{/withInterfaces}}
    {{#operation}}
    /**
     * {{&notes}}
     {{#summary}}
     * @summary {{&summary}}
     {{/summary}}
     {{#allParams}}
     * @param {{=<% %>=}}{<%&dataType%>}<%={{ }}=%> {{^required}}[{{/required}}{{paramName}}{{^required}}]{{/required}} {{{description}}}
     {{/allParams}}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof {{classname}}
     */ {{! TEMPLATE EDIT }}
    public async {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}options: HarmonyRequestOptions = {}) {
        const harmonyRequestSession = { requestId : Guid.create().toString(), sessionManager: this.sessionManager };
        try {
            const res = await {{classname}}Fp(this.configuration).{{nickname}}(harmonyRequestSession, {{#allParams}}{{paramName}}, {{/allParams}}options)(this.fetch, this.basePath);
            if (!options.doNotAwaitForJobs && res.isJob && this.jobManager) {
                return this.jobManager.awaitForJob(res);
            }
            return res;
        } catch (error) {
            if (error.errorScope === HarmonyErrorScope.SESSION) {
                throw error;
            }

            const parsedError = await parseFetchError(error, harmonyRequestSession);
            throw parsedError;
        }
    }

    {{/operation}}
}
{{/operations}}{{/apis}}{{/apiInfo}}

{{! TEMPLATE EDIT: Generate easy to use API Facade, with ready to use instances of each generated API class }}
{{#apiInfo}}

export abstract class HarmonyEndpointBase {
    protected sessionManager: SessionManager = new SessionManager();
    private jobManager?: JobManager = new JobManager(((jobId: string) => (this as any)?.JobsApi?.getJobById?.(jobId)) as any);

    public static info(): HarmonyEndpointSDKInfo {
       return {
            sdkBuild: buildManifest.build,
            sdkVersion: packageJson.version,
            spec: buildManifest?.spec || '',
            specVersion: swagger?.info?.version || '',
            releasedOn: buildManifest.releasedOn,
        }
    }

    constructor(instanceSchema: string) {
        logger(`A new instance ${instanceSchema} of sdk created in ${RUNNING_ENV} environemnt, full version info: ${JSON.stringify(HarmonyEndpointBase.info())} `);
    }

    public async disconnect() {
        await this.sessionManager.disconnect();
    }

    public async reconnect() {
        await this.sessionManager.reconnect();
    }

    public get connectionState(): SDKConnectionState {
        return this.sessionManager.connectionState();
    }

    {{#apis}}
    public readonly {{classname}} = new {{classname}}(this.sessionManager, this.jobManager);
    {{/apis}}
}
{{/apiInfo}}